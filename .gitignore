import RPi.GPIO as GPIO
import time
from datetime import datetime
import csv
from contextlib import redirect_stdout
import threading
import serial

def setup_gpio(pin):
    # Set the GPIO mode to BCM
    GPIO.setmode(GPIO.BCM)
    
    # Set GPIO pin as an output
    GPIO.setup(pin, GPIO.OUT)

def set_gpio_high(pin):
    # Set GPIO pin to high
    GPIO.output(pin, GPIO.HIGH)

def set_gpio_low(pin):
    # Set GPIO pin to low
    GPIO.output(pin, GPIO.LOW)

def main(offset, relay_on_time, interval, repetitions, gpio_pin, serial_flag):
    try:
        # Setup GPIO
        setup_gpio(gpio_pin)
        # Wait for the offset time
        time.sleep(offset)
        
        for _ in range(repetitions):
            # Set GPIO pin to high (relay on)
            set_gpio_high(gpio_pin)
            print(f"Thruster ON - GPIO pin {gpio_pin} set to HIGH")
            
            # Wait for the relay on time
            time.sleep(relay_on_time)
            
            # Set GPIO pin to low (relay off)
            set_gpio_low(gpio_pin)
            print(f"Thruster OFF - GPIO pin {gpio_pin} set to LOW")
            
            # Wait for the interval time
            time.sleep(interval)
            
        # Set the serial flag to indicate the relay control loop is done
        serial_flag.set()
            
    except KeyboardInterrupt:
        print("\nRelay control interrupted by user")
        
    finally:
        # Clean up GPIO settings
        GPIO.cleanup()
        print("GPIO cleanup complete")

def serial_logger(serial_port, filename, serial_flag):
    ser = serial.Serial(serial_port, baud_rate, timeout=2)
    with open(filename, 'w') as f:
        try:
            while not serial_flag.is_set():
                # Read data from the serial port
                data = ser.readline().decode('ASCII').strip()
                curr_time = datetime.now()
                formatted_time = curr_time.strftime('%H:%M:%S.%f')
                
                # If data received, print it
                if data:
                    with redirect_stdout(f):
                        print(formatted_time, "Received:", data)
                        
        except KeyboardInterrupt:
            print("\nSerial logging interrupted by user")
            
        finally:
            print("Closing the serial port.")
            ser.close()

if __name__ == "__main__":
    # Define input parameters for relay control
    offset = float(input("Enter offset time (seconds): "))
    relay_on_time = float(input("Enter Burn time (seconds): "))
    interval = float(input("Enter interval time (seconds): "))
    repetitions = int(input("Enter number of repetitions: "))
    gpio_pin = 27  # Adjust the GPIO pin as needed
    
    # Define input parameters for serial logging
    serial_port = '/dev/ttyUSB0'
    baud_rate = 38400
    serial_filename = input("Enter the file name for serial output (e.g., output.csv): ")
    
    # Create a threading Event to signal the end of relay control loop
    serial_flag = threading.Event()
    
    # Create threads for relay control and serial logging
    relay_thread = threading.Thread(target=main, args=(offset, relay_on_time, interval, repetitions, gpio_pin, serial_flag))
    serial_thread = threading.Thread(target=serial_logger, args=(serial_port, serial_filename, serial_flag))
    
    # Start both threads
    relay_thread.start()
    serial_thread.start()
    
    try:
        # Wait for the relay control thread to finish
        relay_thread.join()
    except KeyboardInterrupt:
        print("\nMain program interrupted by user")
    
    # Wait for the serial logging thread to finish
    serial_thread.join()
